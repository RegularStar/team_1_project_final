name: Deploy to EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: github_ci
          MYSQL_ROOT_PASSWORD: rootpw
          TZ: Asia/Seoul
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -prootpw"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends default-libmysqlclient-dev default-mysql-client build-essential pkg-config

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MySQL (sanity check)
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -uroot -prootpw -e "SELECT 1" mysql > /dev/null 2>&1; then
              echo "MySQL ready"
              exit 0
            fi
            echo "MySQL not ready yet..."
            sleep 2
          done
          echo "MySQL did not become ready in time" >&2
          exit 1

      - name: Run Django tests
        env:
          SECRET_KEY: test-secret-key
          DEBUG: "False"
          ALLOWED_HOSTS: localhost,127.0.0.1
          DB_NAME: github_ci
          DB_USER: root
          DB_PASSWORD: rootpw
          DB_HOST: 127.0.0.1
          DB_PORT: "3306"
          TZ: Asia/Seoul
        run: |
          python manage.py migrate --noinput
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      TARGET_DIR: /home/${{ secrets.EC2_USER }}/skillbridge

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure project directory exists
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p $TARGET_DIR"

      - name: Sync project files
        run: |
          rsync -az --delete \
            --exclude '.git/' \
            --exclude 'venv/' \
            --exclude '__pycache__/' \
            --exclude '*.pyc' \
            --exclude '.env' \
            --exclude 'db.sqlite3' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$TARGET_DIR/

      - name: Write environment file
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          if [ -n "$ENV_FILE" ]; then
            printf '%s' "$ENV_FILE" | ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" "cat > $TARGET_DIR/.env"
          fi

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd $TARGET_DIR
            docker compose down --remove-orphans || true
            docker compose up -d --build
